---
# Display the Host OS Distribution 
# Reason its that because this role only support RedHat and Fedora
- name: Display Host OS Distribution
  debug:
    var: ansible_facts['distribution']

# Installing the dependencies required
- name: Install required packages (Podman, httpd-tools, python3.11, python3-pip and libselinux-python3)
  package:
    name: "{{ item }}"
    state: present
  loop:
    - podman
    - httpd-tools
    - python3.11
    - python3-pip
    - libselinux-python3
  become: true
  when: "'RedHat' in ansible_facts['distribution'] or 'Fedora' in ansible_facts['distribution']"

- name: Install required pip packages (openshift, pyyaml, kubernetes, passlib and pyOpenSSL)
  pip:
    name:
      - openshift
      - pyyaml
      - kubernetes
      - passlib
      - pyOpenSSL
  when: "'RedHat' in ansible_facts['distribution'] or 'Fedora' in ansible_facts['distribution']"

- name: Install roles from Ansible Galaxy
  command: ansible-galaxy collection install {{ item }}
  with_items:
    - containers.podman
    - community.crypto
    - community.general

- name: Collect only facts returned by facter
  ansible.builtin.setup:
    gather_subset:
      - '!all'
      - '!<any valid subset>'
      - facter

# Check if the ocpdiscon-registry is running 
#if true skip the Offline Registry Deployment block otherwise do it
- name: Gather service facts
  ansible.builtin.service_facts:
  register: service_facts

- debug:
    msg: Docker installed!
  when: "'container-ocpdiscon-registry' in services"

- name: Offline Registry Deployment
  tags: offline_registry
  block:
  # Make sure that the directories exists otherwise those will be created
  - name: Check if directories exist
    stat:
      path: "{{ item }}"
    loop:
      - "{{ registry_data_dir }}"
      - "{{ registry_auth_dir }}"
      - "{{ registry_certs_dir }}"
      - "{{ imageset_directory }}"
    register: dir_check_results
    ignore_errors: true

  - name: Display ocpdiscon_registry_status
    debug:
      var: dir_check_results.results

  # Create the directories if not existing already
  - name: Create directory structure if needed
    file:
      path: "{{ item.item }}"
      owner: "{{system_user_username}}"  # Replace with the desired owner
      group: "{{system_user_group}}"  # Replace with the desired group
      state: directory
      recurse: yes
    loop: "{{ dir_check_results.results }}"
    when: not item.stat.exists
    become: true

  # Changing the file structure and files permission to the system username
  # This measure its ensuring that we are not going to rely on the root or any elevated system user
  - name: Change ownership of directories
    file:
      path: "{{ item }}"
      recurse: yes
      owner: "{{system_user_username}}"  # Replace with the desired owner
      group: "{{system_user_group}}"  # Replace with the desired group
    loop: 
      - "{{ imageset_directory }}"
      - "{{ registry_directory }}"
      - "{{ registry_data_dir }}"
      - "{{ registry_auth_dir }}"
      - "{{ registry_certs_dir }}"
    become: true

  - name: Generate a self-signed private key
    community.crypto.openssl_privatekey:
      path: "{{registry_certs_dir}}/domain-reg.key"
      size: 4096
      mode: '0775'
      type: RSA
      format: pkcs1
      cipher: sha256
      passphrase: ""
      regenerate: "full_idempotence"
      return_content: false
      state: present
    become: true

  - name: Create certificate signing request (CSR) for self-signed certificate
    community.crypto.openssl_csr:
      path: "{{registry_certs_dir}}/domain-reg.csr"
      privatekey_path: "{{registry_certs_dir}}/domain-reg.key"
      country_name: "{{ cert_c }}"
      state_or_province_name: "{{ cert_s }}"
      locality_name: "{{ cert_l }}"
      organization_name: "{{ cert_o }}"
      organizational_unit_name: "{{ cert_ou }}"
      common_name: "{{ cert_cn }}"
      subject_alt_name: "DNS:{{ host_fqdn }}"
      subject_alt_name_critical: true
    become: true

  - name: Generate a self-signed SSL/TLS certificate (valid for 1 years)
    community.crypto.x509_certificate:
      path: "{{registry_certs_dir}}/domain-reg.crt"
      privatekey_path: "{{registry_certs_dir}}/domain-reg.key"
      csr_path: "{{registry_certs_dir}}/domain-reg.csr"
      provider: selfsigned
      selfsigned_not_after: "+365d"
      mode: '0775'
    become: true

  - name: Copy domain-reg.crt to CA trust anchors directory
    copy:
      src: "{{registry_certs_dir}}/domain-reg.crt"
      dest: /etc/pki/ca-trust/source/anchors/
      mode: '0775'
    become: true
    register: copy_result

  - name: Update CA trust
    command: update-ca-trust
    become: true
    when: copy_result.changed

  - name: Add a user to the Offline Registry
    community.general.htpasswd:
      path: "{{registry_auth_dir}}/htpasswd"
      name: "{{registry_username}}"
      password: "{{registry_password}}"
      owner: "{{system_user_username}}"  # Replace with the desired owner
      group: "{{system_user_group}}"  # Replace with the desired group
      crypt_scheme: bcrypt
      mode: 0640
    become: true

  - name: Run Offline Registry Container
    containers.podman.podman_container:
      name: ocpdiscon-registry
      image: quay.io/midu/registry:latest
      ports:
        - "5000:5000"
      env:
        REGISTRY_AUTH: htpasswd
        REGISTRY_AUTH_HTPASSWD_REALM: Registry
        REGISTRY_HTTP_SECRET: ALongRandomSecretForRegistry
        REGISTRY_AUTH_HTPASSWD_PATH: /auth/htpasswd
        REGISTRY_HTTP_TLS_CERTIFICATE: /certs/domain-reg.crt
        REGISTRY_HTTP_TLS_KEY: /certs/domain-reg.key
        REGISTRY_COMPATIBILITY_SCHEMA1_ENABLED: true
        REGISTRY_STORAGE_DELETE_ENABLED: true
      volumes:
        - "{{registry_data_dir}}:/var/lib/registry:z"
        - "{{registry_auth_dir}}:/auth:z"
        - "{{registry_certs_dir}}:/certs:z"
      state: started

  # Generate rootless systemd ocpdiscon-registry.service to manage LCM
  - name: Generate systemd service unit file for ocpdiscon-registry container
    containers.podman.podman_generate_systemd:
      name: ocpdiscon-registry
      new: true
      dest: "{{ lookup('env', 'HOME') }}/.config/systemd/user/"
    register: systemd_generation_result

  # Rootless systemd ocpdiscon-registry.service to manage LCM
  - name: Ensure ocpdiscon-registry container is started and enabled
    ansible.builtin.systemd:
      name: container-ocpdiscon-registry
      state: started
      enabled: true
      daemon_reload: true
      scope: user
  when: "'container-ocpdiscon-registry' is not in services and 'RedHat' in ansible_facts['distribution'] or 'Fedora' in ansible_facts['distribution']"

- name: Template the imageset-config.yaml file
  tags: imageset_config_template
  block:
  # Make sure that the directories exists otherwise those will be created
  - name: Check if directories exist
    stat:
      path: "{{ item }}"
    loop:
      - "{{ imageset_directory }}"
    register: dir_check_results
    ignore_errors: true

  # Create the directories if not existing already
  - name: Create directory structure if needed
    file:
      path: "{{ item.item }}"
      owner: "{{system_user_username}}"  # Replace with the desired owner
      group: "{{system_user_group}}"  # Replace with the desired group
      state: directory
      recurse: yes
    loop: "{{ dir_check_results.results }}"
    when: not item.stat.exists
    become: true

  - name: Copy file from Ansible role to localhost
    copy:
      dest: "{{imageset_directory}}/release_versions.yml"
      content: "{{ lookup('file', '{{role_path}}/files/release_versions.yml') }}"
      mode: '0664'

  - name: Template the imageset-config.yaml file
    containers.podman.podman_container:
      name: imageset-config-templater
      image: quay.io/midu/imageset-config-release-templater:latest
      env:
        RELEASE_VERSION: "{{release_version}}"
        RELEASE_PROFILE: "{{release_profile}}"
      volumes:
        - "{{imageset_directory}}:/cluster-operators:z"
      state: started


# This task will start the mirroring process
# and prepare the internal release
- name: Starting the mirroring process
  containers.podman.podman_container:
    name: oc-mirror-locally
    image: quay.io/midu/oc-mirror-local:latest
    volumes:
      - "{{imageset_directory}}:/cluster-operators:z"
      - "{{pull_secret_directory}}:/home/admin/.docker:z"
    state: started
  tags:
  - mirror_locally


- name: Offline Mirroring
  tags: mirror_offline_registry
  block:
  - name: OpenShift Release Upgrade Details
    set_fact:
      release_versions: "{{ lookup('file', '{{role_path}}/files/release_versions.yml') | from_yaml }}"

  - name: Define ocp_release as a fact
    set_fact:
      ocp_release: release_versions['{{release_version}}']['ocp-release']

  - name: Starting the mirroring process to Offline Registry
    containers.podman.podman_container:
      name: oc-kubeadmin-mirror
      image: quay.io/midu/oc-kubeadmin-mirror:latest
      env:
        RELEASE_VERSION: "{{release_version}}"
        OFFLINE_REGISTRY_FQDN: "{{registry_fqdn}}"
        OFFLINE_REGISTRY_PORT: "{{registry_port}}"
      volumes:
        - "{{imageset_directory}}:/cluster-operators:z"
        - "{{pull_secret_directory}}:/home/admin/.docker:z"
      command: "oc-mirror --config /cluster-operators/imageset-config.yaml docker://{{registry_fqdn}}:{{registry_port}}/ocp-upgrade-release --dest-skip-tls"
      state: started